# epanet ensemble simulation stack
# sam@citilogics.com
#
#
# - redis: serve the job queue
# - file_store: file store accessible to all workers. POST files and GET them out.
# - worker: execute simulation, upload results
# - redis-dashboard: visualize worker progress
# - influx: collect results
# - dashboard: visualize results
#

version: '3.3'
services:

  queue:
    image: redis:3.2
    restart: always
    deploy:
      placement:
        constraints: [node.role == manager]
    ports:
      - 6379:6379

  file_store:
    image: mayth/simple-upload-server
    restart: always
    deploy:
      placement:
        constraints: [node.role == manager]
    ports:
      - 25478:25478
    entrypoint:
      - app
      - -token
      - 2da30b10533d688e19f7
      - /files
    volumes:
      - file_store:/files

  dashboard:
    image: grafana/grafana:5.1.3
    restart: always
    deploy:
      placement:
        constraints: [node.role == manager]
    ports:
      - 3000:3000
    environment:
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_ADMIN_PASSWORD=secret
    volumes:
      - dash:/var/lib/grafana
      - /root/grafana-provisioning:/etc/grafana/provisioning:ro

  influx:
    image: influxdb:1.5.2
    restart: always
    deploy:
      placement:
        constraints: [node.role == manager]
    environment:
      #- INFLUXDB_HTTP_AUTH_ENABLED=true
      - INFLUXDB_DATA_INDEX_VERSION=tsi1
      - INFLUXDB_DATA_MAX_SERIES_PER_DATABASE=0
      - INFLUXDB_DB=cloudburst
    volumes:
      - influx:/var/lib/influxdb

  worker:
    image: openwateranalytics/ensemble_worker
    environment:
      - FILE_HOST=file_store
      - FILE_HOST_PORT=25478
      - FILE_HOST_TOKEN=2da30b10533d688e19f7
      - REDIS_HOST=queue
    deploy:
      mode: global # one instance per node
      placement:
        constraints: [node.role != manager] # every non-manager node
      resources:
        limits:
          cpus: '1'
        reservations:
          cpus: '1'

  queue-dash:
    image: robbieclarken/lightweight-rq-dashboard
    restart: always
    deploy:
      placement:
        constraints: [node.role == manager]
    ports:
      - 9181:9181
    command: -H queue

  visualizer:
    image: dockersamples/visualizer:stable
    ports:
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      placement:
        constraints: [node.role == manager]


volumes:
  influx:
  dash:
  file_store:
